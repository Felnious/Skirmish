// Mono-space font required
{
	"economy": {
		"energy": {
			// If land area >= 40% of the map then "land" config used, "water" otherwise
			"land": {
				// "<energy_def>": [<lower limit>, <upper limit>, <m-income>, <e-income>, <efficiency>]
				// limit = random(<lower limit>..<upper limit>)
				//efficiency calculation: engy.cond.score = SQUARE(engy.make) / (cdef->GetCostM() * cdef->GetDef()->GetXSize() * cdef->GetDef()->GetZSize());
				//higer value => more efficient | e-output * e-output / mcost*x*y
				"armwin": [10, 20],
				"armsolar": [8, 12],
				"armadvsol": [8, 12],
				"armfus": [3, 4],
				"armafus": [4, 5],
	
				"corwin": [10, 20],
				"corsolar": [8, 12],
				"coradvsol": [8, 12],
				"corfus": [3, 4],
				"corafus": [4, 5],
	
				"legmex": [3, 25],
				"legwin": [10, 20],
				"legsolar": [8, 12],
				"legadvsol": [8, 12],
				"legfus": [3, 4],
				"legafus": [4, 5]
			},
			"water": {
				"armtide": [14, 25],
				"armwin": [10, 20],
				"armsolar": [1],
				"armadvsol": [12, 16],
				"armuwfus": [1, 2],

				"cortide": [14, 25],
				"corwin": [10, 20],
				"corsolar": [1],
				"coradvsol": [12, 16],
				"coruwfus": [1, 2]
			},
	
			"factor": [[1.0, 300], [60.0, 7200]],
			// desired energy rule #1: e-income >= m-income * factor
			// income factor for energy, time is in seconds
			// [[<start_factor>, <start_time>], [<end_factor>, <end_time>]]
	
			"min_income": 5,  // minimum energy income to filter out generators
	
			"cost_ratio": 0.43, //0.43
			// min. limit for energy to cost ratio to have access to next energy tier 
			// (e.g. armfusion ecost (21000*0.04=1260 => 840e income neccessary to start building fusion)
			// ratio 0.4 => armadvsol 200e, armfus 840e, armafus 2760e
	
			"em_ratio": 0.08,  // energy to metal ratio, used with UnitDef.build_speed
		
			"pylon": []
		},
	
		"cluster_range": 800, //900
		//size of mex cluster between two points
	
		"geo": {
			"armada": "armgeo",
			"cortex": "corgeo",
			"legion": "leggeo"
		},
		"mex": {
			"armada": "armmex",
			"cortex": "cormex",
			"legion": "legmex"
		},
	// buildpower -  Mobile buildpower to metal income ratio,
	// works but with regard to behaviour->UnitDef->build_speed. With 1.25 and m-income=100 means AI will try to build at max 125 mobile build_speed in total.
	
	//eps-step - scales metal income; // ecoFactor = teamSize*eps_step+(1-eps_step);  affect next eenergy and m-income:
	// 1) during new builder task creation; 2) for tier selection from factory 3) for making defences 4) for checking if enough income to build super weapon
	
	//buildpower -  Mobile buildpower to metal income ratio,
	// works but with regard to behaviour->UnitDef->build_speed. With 1.25 and m-income=100 means AI will try to build at max 125 mobile build_speed in total.
	
	//mspull - // Mobile constructor to static constructor metal pull ratio; [[<value>, <start_mex_percent>], [<value>, <end_mex_percent>]]
	
		"mex_up": 3,  // maximum number of simultaneous mex upgrades 2/3
		"calc_mex": false,  // always calculate mex spots (global)
		"goal_exec": 42.0,  // assign builders till targeted time (in s) to build reached => low value: builders focus on few projects; high value: builder do more task; old values: 45, 50
		"build_mod": 1000.0,  // default build_mod for UnitDef, if it's not specified
		"eps_step": 0.2,
		"buildpower": 1.2, //1.25, 1.5, 1.3
		"excess": -1.0, 	// Metal excess to income ratio, -1 to disable
	
		"ms_pull":  [[0.57, 0.0], [0.66, 0.34]],
		// AI balances metal spent on tasks for mobile cons / metal spent on tasks for factories. (mobile to static reatio in%)
		// [[<value1>, <start_mex_percent>], [<value2>, <end_mex_percent>]]
		// mex percent = % of mex of whole map 
		// value = how much metal (%) will be spend for mobile construction task (opposite to factory tasks). which is in the end all statics
		
		
		// If its <1.0 then expansion obeys ms_pull rule, if >=1.0 then ms_pull doesn't affect expansion (mex, pylon, energy). [[0.57, 0.0], [0.66, 0.34]]
		// [<cap_percent>, <is_ally_cap>]
		"mex_max": [2.0, false],  //  0.1 = 10% ai stops expanding when it has 10% of map
	
		// Construction order delay in seconds, -1 to disable | used to make ai easier
		// [[<start_delay>, <start_time>], [<end_delay>, <end_time>]]
		"build_delay": [[-1.0, 0], [-1.0, 0]],
	
		// [0] - metal-expenditure multiplier for build condition of new factory or assistant 
		// [1] - energy-expenditure multiplier for build condition of new factory or assistant
		// [2] - multiplier for total factory metal-expenditure, used as condition for new factory or assistant
		// [3] - multiplier for total factory energy-expenditure, used as condition for new factory or assistant
		"production": [0.9, 0.7, 0.8, 0.8],
	
		//"terra": "armsy",
		"assist": {
			"armada": "armnanotc",
			"cortex": "cornanotc",
			"legion": "legnanotc"
		},
	
		// Unknown UnitDef replacer
		"default": {
			"armada": "armwin",
			"cortex": "corwin",
			"legion": "legwin"
			}
		}
	}
	